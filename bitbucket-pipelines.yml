#  Template python-build
#  This template allows you to validate your python code.
#  The workflow allows running tests and code linting on the default branch.

image: python:3.11

testStep: &testStep
  step:
    runs-on:
          - self.hosted
          - linux
    name: Test
    caches:
      - pip
    script:
      - apt-get update && apt-get -y install binutils libproj-dev gdal-bin postgresql-client
      - pip install --upgrade pip pipenv
      - pipenv install --dev --system
      - python manage.py collectstatic --noinput
      - pytest -n auto
    services:
      - postgres
      - redis


lintStep: &lintStep
  step:
    runs-on:
          - self.hosted
          - linux
    name: Lint code
    script:
      - pip install ruff
      - ruff check .
    caches:
      - pip

securityStep: &securityStep
  step:
    runs-on:
          - self.hosted
          - linux
    name: Security scan
    caches:
      - node
      - pip
    script:
      - pip install --upgrade pip pipenv
      - pipenv install
      - curl --compressed https://static.snyk.io/cli/latest/snyk-linux -o snyk
      - chmod +x ./snyk
      - ./snyk auth $SNYK_TOKEN
      - ./snyk test

definitions:
  deployScriptCommon: &deployScriptCommon
    export AWS_REGION=us-east-1
    && export AWS_ROLE_ARN=arn:aws:iam::336162656437:role/chatbot-bitbucket
    && export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
    && echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
    && curl -Lo copilot-bin https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
    && chmod +x copilot-bin
  steps:
    step: &deployStepCommon
      runs-on:
        - self.hosted
        - linux
      image: amazon/aws-cli:latest
      oidc: true
      services:
        - docker
      caches:
        - docker


pipelines:
  default:
    - parallel:
        - <<: *testStep
        - <<: *lintStep
        - <<: *securityStep
  branches:
    develop:
      - parallel:
          - <<: *testStep
          - <<: *lintStep
          - <<: *securityStep
      - parallel:
          - step:
              <<: *deployStepCommon
              name: Deploy web to Development environment
              deployment: Development
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name web --env=dev
          - step:
              <<: *deployStepCommon
              name: Deploy worker to Development environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name worker --env=dev
          - step:
              <<: *deployStepCommon
              name: Deploy scheduler to Development environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name scheduler --env=dev
    staging:
      - parallel:
          - <<: *testStep
          - <<: *lintStep
          - <<: *securityStep
      - parallel:
          - step:
              <<: *deployStepCommon
              name: Deploy web to Staging environment
              deployment: Staging
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name web --env=test
          - step:
              <<: *deployStepCommon
              name: Deploy worker to Staging environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name worker --env=test
          - step:
              <<: *deployStepCommon
              name: Deploy scheduler to Staging environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name scheduler --env=test
    main:
      - parallel:
          - <<: *testStep
          - <<: *lintStep
          - <<: *securityStep
      - parallel:
          - step:
              <<: *deployStepCommon
              name: Deploy web to Production environment
              deployment: Production
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name web --env=prod
          - step:
              <<: *deployStepCommon
              name: Deploy worker to Production environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name worker --env=prod
          - step:
              <<: *deployStepCommon
              name: Deploy scheduler to Production environment
              script:
                - *deployScriptCommon
                - ./copilot-bin svc deploy --name scheduler --env=prod

definitions:
  services:
    postgres:
      image: postgres:15-alpine
      variables:
        POSTGRES_DB: 'chatbot'
        POSTGRES_USER: 'bcfg_sa'
        POSTGRES_PASSWORD: 'root_password'
    redis:
      image: redis

